/** @extends {TransformStream<Uint8Array, import('./api.js').Block & import('./api.js').Position>} */
export class CARReaderStream extends TransformStream<Uint8Array, import("./api.js").Block & import("./api.js").Position> {
    /**
     * @param {QueuingStrategy<Uint8Array>} [writableStrategy]
     * An object that optionally defines a queuing strategy for the stream.
     * @param {QueuingStrategy<import('./api.js').Block & import('./api.js').Position>} [readableStrategy]
     * An object that optionally defines a queuing strategy for the stream.
     * Defaults to a CountQueuingStrategy with highWaterMark of `1` to allow
     * `getHeader` to be called before the stream is consumed.
     */
    constructor(writableStrategy?: QueuingStrategy<Uint8Array> | undefined, readableStrategy?: QueuingStrategy<import("./api.js").Block & import("./api.js").Position> | undefined);
    /**
     * Get the decoded CAR header.
     */
    getHeader(): Promise<import("./api.js").CARHeader>;
    #private;
}
//# sourceMappingURL=reader.d.ts.map